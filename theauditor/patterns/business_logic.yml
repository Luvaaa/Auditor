# Business logic issue patterns
patterns:
  - name: "money-float-arithmetic"
    description: "Using float/double for money calculations - precision loss risk"
    regex: "(price|cost|amount|total|balance|payment|fee|money)\\s*[\\*\\+\\-\\/].*\\b(float|Float|double|Double|parseFloat)\\b"
    languages: ["*"]
    severity: "critical"
    
  - name: "percentage-calc-error"
    description: "Potential percentage calculation error (missing parentheses)"
    regex: "\\b\\d+\\s*\\/\\s*100\\s*\\*(?!\\s*\\()|\\*\\s*\\d+\\s*\\/\\s*100(?!\\s*\\))"
    languages: ["*"]
    severity: "high"
    
  - name: "timezone-naive-datetime"
    description: "Using naive datetime without timezone awareness"
    regex: "(datetime\\.now\\(\\)|Date\\.now\\(\\)|new Date\\(\\))(?!.*\\b(utc|UTC|timezone|tz|Z)\\b)"
    languages: ["python", "javascript", "typescript", "java"]
    severity: "medium"
    
  - name: "email-regex-validation"
    description: "Using regex for email validation (use proper library instead)"
    regex: "regex.*@.*\\\\@.*email|email.*regex.*\\\\@"
    languages: ["*"]
    severity: "low"
    
  - name: "divide-by-zero-risk"
    description: "Division without zero check"
    regex: "\\/\\s*\\b(count|length|size|total|sum|num)\\b(?!.*\\b(if|check|guard|max\\(|Math\\.max)\\b)"
    languages: ["*"]
    severity: "medium"
