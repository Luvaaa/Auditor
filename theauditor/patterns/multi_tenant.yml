# Multi-tenant Security Patterns
# Based on PostgreSQL RLS implementation with app.current_facility_id session variable

patterns:
  - name: "cross-tenant-data-leak"
    description: "Raw SQL query on sensitive tables without facility_id filtering"
    severity: "critical"
    confidence: 0.85
    # Detects sequelize.query() calls on sensitive tables that lack WHERE facility_id
    # Pattern looks for: sequelize.query with SELECT/UPDATE/DELETE on key tables
    # without a WHERE clause containing facility_id (case-insensitive)
    regex: '(?i)sequelize\.query\s*\(\s*[''"`](?:SELECT|UPDATE|DELETE)(?:(?!WHERE\s+[^;]*facility[_]?id)(?!WHERE\s+[^;]*"facility[_]?id")(?!JOIN)(?!USING\s*\()[\s\S])*?(?:FROM|UPDATE)\s+[''"`]?\s*(?:products|orders|inventory|customers|users|locations|transfers)(?:(?!WHERE\s+[^;]*facility[_]?id)(?!WHERE\s+[^;]*"facility[_]?id")[\s\S])*?[''"`]'
    languages: ["javascript", "typescript"]
    files: ["*.js", "*.ts", "*.jsx", "*.tsx"]
    examples:
      - "sequelize.query('SELECT * FROM products')"
      - "sequelize.query(`DELETE FROM orders WHERE status = 'cancelled'`)"
    counter_examples:
      - "sequelize.query('SELECT * FROM products WHERE facility_id = :facilityId')"
      - "Product.findAll() // ORM calls are protected by RLS"

  - name: "rls-policy-without-using"
    description: "CREATE POLICY statement missing USING clause for row filtering"
    severity: "critical"
    confidence: 0.95
    # Detects CREATE POLICY statements that don't have a USING clause
    # This is critical because without USING, the policy won't filter rows
    regex: '(?i)CREATE\s+POLICY\s+\w+\s+ON\s+[''"`]?\w+[''"`]?\s*(?:FOR\s+(?:ALL|SELECT|INSERT|UPDATE|DELETE)\s*)?(?:TO\s+\w+\s*)?(?:WITH\s+CHECK\s*\([^)]*\)\s*)?(?![\s\S]*?USING\s*\()'
    languages: ["javascript", "typescript", "sql"]
    files: ["*.js", "*.ts", "*.sql", "*migration*.js", "*migration*.ts"]
    examples:
      - "CREATE POLICY test_policy ON products FOR ALL"
      - "CREATE POLICY test ON users TO admin_role WITH CHECK (true)"
    counter_examples:
      - "CREATE POLICY test ON products USING (facility_id = current_setting('app.current_facility_id')::uuid)"

  - name: "missing-rls-context-setting"
    description: "Database transaction without setting app.current_facility_id"
    severity: "high"
    confidence: 0.75
    # Detects transaction blocks that don't set the RLS context
    # Looks for sequelize.transaction() without SET LOCAL app.current_facility_id
    regex: '(?i)sequelize\.transaction\s*\((?:(?!SET\s+LOCAL\s+app\.current_facility[_]?id)[\s\S])*?\}\s*\)'
    languages: ["javascript", "typescript"]
    files: ["*.js", "*.ts", "*.jsx", "*.tsx"]
    examples:
      - |
        sequelize.transaction(async (t) => {
          await Product.create({...}, { transaction: t });
        })
    counter_examples:
      - |
        sequelize.transaction(async (t) => {
          await sequelize.query('SET LOCAL app.current_facility_id = :id', { transaction: t });
          await Product.create({...}, { transaction: t });
        })

  - name: "raw-query-without-transaction"
    description: "Raw SQL query executed outside transaction context (RLS may not apply)"
    severity: "high"
    confidence: 0.70
    # Detects sequelize.query() calls that don't pass a transaction option
    # Without transaction, SET LOCAL won't persist for the query
    regex: '(?i)sequelize\.query\s*\([^)]*(?:SELECT|INSERT|UPDATE|DELETE)[^)]*\)(?:(?!transaction\s*:)(?!\.transaction\s*\()[\s\S]){0,100}?[;,\s]'
    languages: ["javascript", "typescript"]
    files: ["*.js", "*.ts", "*.jsx", "*.tsx"]
    examples:
      - "await sequelize.query('SELECT * FROM products')"
      - "sequelize.query(sql, { type: QueryTypes.SELECT })"
    counter_examples:
      - "sequelize.query(sql, { transaction: t })"
      - "sequelize.query(sql, { transaction: req.transaction })"

  - name: "bypass-rls-with-superuser"
    description: "Potential RLS bypass by using database superuser connection"
    severity: "critical"
    confidence: 0.80
    # Detects connections or operations that might use postgres/superuser role
    # which bypasses RLS policies
    regex: '(?i)(?:DB_USER|DATABASE_USER|POSTGRES_USER)\s*[=:]\s*[''"`]?(?:postgres|root|admin|superuser|sa)[''"`]?'
    languages: ["*"]
    files: ["*.env", "*.js", "*.ts", "*.yml", "*.yaml", "docker-compose*"]
    examples:
      - "DB_USER=postgres"
      - "DATABASE_USER: 'postgres'"
    counter_examples:
      - "DB_USER=app_user"
      - "DATABASE_USER=limited_user"